name: Build Project

on:
  push:
    branches:
      - main
    paths-ignore:
      - .gitignore
      - .vscode
      - package-lock.json
      - node_modules
  pull_request:
    branches:
      - main
    paths-ignore:
      - .gitignore
      - .vscode
      - package-lock.json
      - node_modules

env:
  DOCKER_REGISTRY: docker.deere.com:6555

jobs:
  tests:
    name: Tests

    runs-on:
      - ubuntu-latest

    strategy:
      matrix:
        node-version: [ 17.x ]
    
    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v3
      
      - name: Use Node.js 18.x
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Install dependencies
        run: npm install
      
      - name: Run Tests
        run: npm test
      
#      # From https://github.com/marketplace/actions/junit-report-action
#      - name: Publish Test Report
#        uses: mikepenz/action-junit-report@v3
#        if: always() # always run even if the previous step fails
#        with:
#          repo-token: ${{ secrets.GITHUB_TOKEN }}
#          report_paths: '**/build/test-results/test/TEST-*.xml'

  trivy-vulnerability-scan:
    name: Trivy Vulnerability Scan

    runs-on:
      - ubuntu-latest
    
    needs:
      - tests

    steps:
      - name: Checkout Codebase
        uses: actions/checkout@v3
      
      - name: Build Docker Image
        run: |
          docker build --no-cache -t nodejs-hello-world:${{github.sha}} .
      - name: Run Trivy image vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: nodejs-hello-world:${{github.sha}}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL'

  docker-publish:
    name: Docker Image Publish

    needs:
      - trivy-vulnerability-scan
    
    runs-on:
      - ubuntu-latest

    steps:
      - name: Checkout codebase
        uses: actions/checkout@v3

      # from github.deere.com/developer-enablement/java-hello-world/blob/main/.github/workflows/main.yaml
      - name: Set up image name
        if: ${{ !env.ACT }}
        run: |
          if [[ -v ACT ]]; then GITHUB_REPOSITORY=local/local; fi
          REPO_NAME_LOWERCASE=$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME=${DOCKER_REGISTRY}/${REPO_NAME_LOWERCASE}
          echo "DOCKER_IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
      
      - name: Determine if push to main
        run: |
          echo "IS_PUSH_TO_MAIN=${{github.event_name == 'push' &&
                                   github.ref == 'refs/heads/main' &&
                                   github.repository == 'developer-enablement/java-hello-world'}}" >> $GITHUB_ENV
      - name: Build Docker Image
        if: ${{ env.IS_PUSH_TO_MAIN && !env.ACT }}
        run: |
          docker build --no-cache -t ${DOCKER_IMAGE_NAME}:${{github.sha}} .
      - name: Login to Docker registry
        if: |
          ${{ env.IS_PUSH_TO_MAIN && !env.ACT }}
        uses: actions/docker/login@master
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_ARTIFACTORY_TOKEN }}

      - name: Push image to Docker registry
        if: |
          ${{ env.IS_PUSH_TO_MAIN && !env.ACT }}
        run: |
          docker push ${DOCKER_IMAGE_NAME}:${{github.sha}}
      - name: Update "latest" tag in Docker registry
        if: |
          ${{ env.IS_PUSH_TO_MAIN && !env.ACT }}
        run: |
          docker tag ${DOCKER_IMAGE_NAME}:${{github.sha}} ${DOCKER_IMAGE_NAME}:latest
          docker push ${DOCKER_IMAGE_NAME}:latest
